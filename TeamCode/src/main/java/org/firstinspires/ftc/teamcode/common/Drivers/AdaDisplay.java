package org.firstinspires.ftc.teamcode.common.Drivers;

import com.qualcomm.robotcore.hardware.I2cAddr;
import com.qualcomm.robotcore.hardware.I2cDeviceSynch;
import com.qualcomm.robotcore.hardware.I2cDeviceSynchDevice;
import com.qualcomm.robotcore.hardware.I2cWaitControl;
import com.qualcomm.robotcore.hardware.configuration.annotations.DeviceProperties;
import com.qualcomm.robotcore.hardware.configuration.annotations.I2cDeviceType;

@SuppressWarnings({"WeakerAccess", "unused"})
@I2cDeviceType
@DeviceProperties(name="Adafruit HT16K33 LED Screen", description="7 Segment Display", xmlTag="HT16K33")
public class AdaDisplay extends I2cDeviceSynchDevice<I2cDeviceSynch> {
    int testBit = 0x70;
    public void writeByteArr(DeviceNumber deviceNumber, byte[] character) {
        this.deviceClient.setI2cAddress(deviceNumber.address);
        deviceClient.write(new byte[] {
                0x00,
                character[0], character[1], character[2], character[3],
                character[4], character[5], character[6], character[7],
                character[8], character[9], character[10], character[11],
                character[12], character[13], character[14], character[15]
        });
    }

    public void writeByteArr(DeviceNumber deviceNumber, int[] character) {
        this.deviceClient.setI2cAddress(deviceNumber.address);
        deviceClient.write(new byte[] {
                0x00,
                (byte) character[0], (byte) character[1], (byte) character[2], (byte) character[3],
                (byte) character[4], (byte) character[5], (byte) character[6], (byte) character[7],
                (byte) character[8], (byte) character[9], (byte) character[10], (byte) character[11],
                (byte) character[12], (byte) character[13], (byte) character[14], (byte) character[15]
        });
    }

    public void writeCharacter(DeviceNumber deviceNumber, AvailableCharacters character) {
        writeByteArr(deviceNumber, character.charCode);
    }

    public void startFlashing() {
        this.deviceClient.setI2cAddress(DeviceNumber.ONE.address);
        deviceClient.write8(0x85);
        this.deviceClient.setI2cAddress(DeviceNumber.TWO.address);
        deviceClient.write8(0x85);
    }
    public void stopFlashing() {
        this.deviceClient.setI2cAddress(DeviceNumber.ONE.address);
        deviceClient.write8(0x81);
        this.deviceClient.setI2cAddress(DeviceNumber.TWO.address);
        deviceClient.write8(0x81);
    }

    public void writeUnderlinedCharacter(DeviceNumber deviceNumber, AvailableCharacters characters) {
        byte[] usedCharCode = characters.charCode;
        writeByteArr(deviceNumber, new byte[] {
                usedCharCode[0], (byte) (usedCharCode[1] + 0x80), usedCharCode[2], (byte) (usedCharCode[3] + 0x80),
                usedCharCode[4], (byte) (usedCharCode[5] + 0x80), usedCharCode[6], (byte) (usedCharCode[7] + 0x80),
                usedCharCode[8], (byte) (usedCharCode[9] + 0x80), usedCharCode[10], (byte) (usedCharCode[11] + 0x80),
                usedCharCode[12], (byte) (usedCharCode[13] + 0x80), usedCharCode[14], (byte) (usedCharCode[15] + 0x80)
        });
    }


    private static byte[] reverseBitsInByteArr(byte[] arr) {
        for (int i = 0; i < 16; i++) {
            arr[i] = reverseBits(arr[i]);
        }

        return arr;
    }

    public static byte reverseBits(byte inputByte) {
        int reversedBits = 0;
        for (int i = 0; i < 8; i++) {
            reversedBits = (reversedBits << 1) | ((inputByte >> i) & 1);
        }
        return (byte) reversedBits;
    }

    public void testWriteChar() {
        byte thing = (byte) 0xFF;
        deviceClient.write(new byte[] {
                0x00,
                thing, thing, thing, thing,
                thing, thing, thing, thing,
                thing, thing, thing, thing,
                thing, thing, thing, thing,
        });
    }

    public void turnOff() {
        deviceClient.write8(0x80, I2cWaitControl.WRITTEN);
    }
    public void turnOn() {
        deviceClient.write8(0x81, I2cWaitControl.WRITTEN);
    }



    public enum DeviceNumber {
        ONE(0x70),
        TWO(0x72),
        THREE(0x74),
        FOUR(0x76);
        I2cAddr address;
        DeviceNumber(int address) {
            this.address = I2cAddr.create7bit(address);
        }
    }


    // INIT STUFF
    public AdaDisplay(I2cDeviceSynch i2cDeviceSynch, boolean deviceClientIsOwned) {
        super(i2cDeviceSynch, deviceClientIsOwned);
        I2cAddr ADDRESS_I2C_DEFAULT = I2cAddr.create7bit(0x70);
        this.deviceClient.setI2cAddress(ADDRESS_I2C_DEFAULT);

        super.registerArmingStateCallback(false);
        this.deviceClient.engage();

        deviceClient.write8(0x21, I2cWaitControl.WRITTEN); // write8 is swapped(?)
        deviceClient.write8(0xA0, I2cWaitControl.WRITTEN);
        deviceClient.write8(0xEE, I2cWaitControl.WRITTEN);
        deviceClient.write8(0x81, I2cWaitControl.WRITTEN);

        ADDRESS_I2C_DEFAULT = I2cAddr.create7bit(0x72);

        this.deviceClient.setI2cAddress(ADDRESS_I2C_DEFAULT);
        deviceClient.write8(0x21, I2cWaitControl.WRITTEN); // write8 is swapped(?)
        deviceClient.write8(0xA0, I2cWaitControl.WRITTEN);
        deviceClient.write8(0xEE, I2cWaitControl.WRITTEN);
        deviceClient.write8(0x81, I2cWaitControl.WRITTEN);
    }


    @Override
    protected synchronized boolean doInitialize() {
        return true;
    }

    @Override
    public Manufacturer getManufacturer() {
        return Manufacturer.Adafruit;
    }
    

    @Override
    public String getDeviceName() {
        return "Adafruit HT16K33 LED Screen";
    }

    public enum AvailableCharacters {
        EMPTY(new int[] {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00}),
        FILLED(new int[] {0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF}),
        ZERO(new int[] {0xF0,0x0F,0x08,0x18,0x04,0x26,0x84,0x21,0x64,0x20,0x18,0x10,0xF0,0x0F,0x00,0x00}),
        ONE(new int[] {0x00,0x00,0x10,0x00,0x08,0x00,0xFC,0x3F,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00}),
        TWO(new int[] {0x30,0x30,0x08,0x28,0x04,0x24,0x04,0x22,0x04,0x21,0x88,0x20,0x70,0x20,0x00,0x00}),
        THREE(new int[] {0x10,0x08,0x08,0x10,0x84,0x20,0x84,0x20,0x84,0x20,0x48,0x11,0x30,0x0E,0x00,0x00}),
        FOUR(new int[] {0x00,0x06,0x80,0x05,0x60,0x04,0x18,0x04,0x04,0x04,0xFC,0x3F,0x00,0x04,0x00,0x00}),
        FIVE(new int[] {0xFC,0x18,0x84,0x20,0x44,0x20,0x44,0x20,0x44,0x20,0x84,0x10,0x04,0x0F,0x00,0x00}),
        SIX(new int[] {0xF0,0x0F,0x08,0x11,0x84,0x20,0x84,0x20,0x84,0x20,0x08,0x11,0x10,0x0E,0x00,0x00}),
        SEVEN(new int[] {0x04,0x00,0x04,0x00,0x04,0x00,0x04,0x3E,0x84,0x01,0x64,0x00,0x1C,0x00,0x00,0x00}),
        EIGHT(new int[] {0x30,0x0E,0x48,0x11,0x84,0x20,0x84,0x20,0x84,0x20,0x48,0x11,0x30,0x0E,0x00,0x00}),
        NINE(new int[] {0x70,0x08,0x88,0x10,0x04,0x21,0x04,0x21,0x04,0x21,0x88,0x10,0xF0,0x0F,0x00,0x00}),
        CHAR_A(new int[] {0x00,0x3F,0xE0,0x02,0x18,0x02,0x04,0x02,0x18,0x02,0xE0,0x02,0x00,0x3F,0x00,0x00}),
        CHAR_B(new int[] {0xFC,0x3F,0x84,0x20,0x84,0x20,0x84,0x20,0x84,0x20,0x48,0x11,0x30,0x0E,0x00,0x00}),
        CHAR_C(new int[] {0xF0,0x0F,0x08,0x10,0x04,0x20,0x04,0x20,0x04,0x20,0x08,0x10,0x10,0x08,0x00,0x00}),
        CHAR_D(new int[] {0xFC,0x3F,0x04,0x20,0x04,0x20,0x04,0x20,0x04,0x20,0x08,0x10,0xF0,0x0F,0x00,0x00}),
        CHAR_E(new int[] {0xFC,0x3F,0x84,0x20,0x84,0x20,0x84,0x20,0x84,0x20,0x84,0x20,0x04,0x20,0x00,0x00}),
        CHAR_F(new int[] {0xFC,0x3F,0x84,0x00,0x84,0x00,0x84,0x00,0x84,0x00,0x84,0x00,0x04,0x00,0x00,0x00}),
        CHAR_G(new int[] {0xF0,0x0F,0x08,0x10,0x04,0x20,0x04,0x20,0x04,0x21,0x04,0x11,0x18,0x3F,0x00,0x00}),
        CHAR_P(new int[] {0xFC,0x3F,0x04,0x01,0x04,0x01,0x04,0x01,0x04,0x01,0x88,0x00,0x70,0x00,0x00,0x00}),
        CHAR_W(new int[] {0xFC,0x07,0x00,0x38,0x00,0x07,0xE0,0x00,0x00,0x07,0x00,0x38,0xFC,0x07,0x00,0x00}),
        CHAR_Y(new int[] {0x0C,0x00,0x30,0x00,0xC0,0x00,0x00,0x3F,0xC0,0x00,0x30,0x00,0x0C,0x00,0x00,0x00}),
        PLAY(new int[] {0xF8,0x0F,0xF0,0x07,0xE0,0x03,0xE0,0x03,0xC0,0x01,0xC0,0x01,0x80,0x00,0x80,0x00}),
        ASTERISK(new int[] {0x80,0x00,0x90,0x04,0xA0,0x02,0xC0,0x01,0xC0,0x01,0xA0,0x02,0x90,0x04,0x80,0x00}),
        DASH(new int[] {0x00,0x00,0x00,0x01,0x00,0x01,0x00,0x01,0x00,0x01,0x00,0x01,0x00,0x01,0x00,0x00}),
        UP_ARROW(new int[] {0x00,0x00,0x10,0x00,0x08,0x00,0xFC,0x3F,0x08,0x00,0x10,0x00,0x00,0x00,0x00,0x00}),
        DOWN_ARROW(new int[] {0x00,0x00,0x00,0x08,0x00,0x10,0xFC,0x3F,0x00,0x10,0x00,0x08,0x00,0x00,0x00,0x00}),
        RIGHT_ARROW(new int[] {0x80,0x00,0x80,0x00,0x80,0x00,0x80,0x00,0xA0,0x02,0xC0,0x01,0x80,0x00,0x00,0x00}),
        LEFT_ARROW(new int[] {0x80,0x00,0xC0,0x01,0xA0,0x02,0x80,0x00,0x80,0x00,0x80,0x00,0x80,0x00,0x00,0x00}),
        PAUSE(new int[] {0x00,0x00,0x00,0x00,0x1E,0x00,0x00,0x00,0x00,0x00,0x1E,0x00,0x00,0x00,0x00,0x00}),
        HAPPY(new int[] {0xF0,0x0F,0x08,0x10,0x44,0x22,0x04,0x24,0x04,0x24,0x44,0x22,0x08,0x10,0xF0,0x0F}),
        SAD(new int[] {0xF0,0x0F,0x08,0x10,0x44,0x24,0x04,0x22,0x04,0x22,0x44,0x24,0x08,0x10,0xF0,0x0F}),
        TEST(new int[] {0xFE,0x0F,0x01,0x10,0x1D,0x10,0xE1,0x10,0x01,0x17,0x01,0x10,0xFE,0x0F,0x00,0x00});
        byte[] charCode;
        AvailableCharacters(int[] code) {
            charCode = (new byte[] {
                    (byte) code[14], (byte) code[15], (byte) code[12], (byte) code[13],
                    (byte) code[10], (byte) code[11], (byte) code[8], (byte) code[9],
                    (byte) code[6], (byte) code[7], (byte) code[4], (byte) code[5],
                    (byte) code[2], (byte) code[3], (byte) code[0], (byte) code[1],
            });
        }
    }
}
